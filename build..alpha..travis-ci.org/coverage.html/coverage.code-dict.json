{"/home/travis/build/npmtest/node-npmtest-devtool/test.js":"/* istanbul instrument in package npmtest_devtool */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-devtool/lib.npmtest_devtool.js":"/* istanbul instrument in package npmtest_devtool */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_devtool = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_devtool = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-devtool/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-devtool && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_devtool */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_devtool\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_devtool.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_devtool.rollup.js'] =\n            local.assetsDict['/assets.npmtest_devtool.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_devtool.__dirname + '/lib.npmtest_devtool.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-devtool/node_modules/devtool/lib/browser-globals.js":"// This file will likely grow as new browser\n// globals cause issues with various Node.js modules\nmodule.exports = [\n  'sessionStorage', 'localStorage',\n  'location', 'history', 'MutationObserver'\n];\n","/home/travis/build/npmtest/node-npmtest-devtool/node_modules/devtool/lib/console-hook.js":"/*\n  Shims devtool console to behave like\n  node, printing to process stdout/stderr.\n */\n\nvar nodeConsole = require('console');\n\nmodule.exports = function consoleHook () {\n  var methods = [ 'error', 'info', 'log', 'warn', 'debug' ];\n  methods.forEach(function (k) {\n    var browserFn = global.console[k];\n    var nodeFn = nodeConsole[k];\n    global.console[k] = function () {\n      var ret = browserFn.apply(this, arguments);\n      if (nodeFn) { // 'debug' only exists in browser console\n        ret = nodeFn.apply(this, arguments);\n      }\n      return ret;\n    };\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-devtool/node_modules/devtool/lib/file-watch.js":"// a thin wrapper around chokidar file watching files\nvar chokidar = require('chokidar');\nvar assign = require('object-assign');\nvar EventEmitter = require('events').EventEmitter;\n\nvar ignores = [\n  'node_modules/**', 'bower_components/**',\n  '.git', '.hg', '.svn', '.DS_Store',\n  '*.swp', 'thumbs.db', 'desktop.ini'\n];\n\nmodule.exports = function fileWatch (glob, opt) {\n  opt = assign({\n    ignored: ignores,\n    ignoreInitial: true\n  }, opt);\n\n  if (opt.poll) {\n    opt.usePolling = true;\n  }\n\n  var emitter = new EventEmitter();\n  var closed = false;\n  var ready = false;\n\n  var watcher = chokidar.watch(glob, opt);\n  watcher.on('change', function (file) {\n    emitter.emit('change', file);\n  });\n\n  // chokidar@1.0.0-r6 only allows close after ready event\n  watcher.once('ready', function () {\n    ready = true;\n    if (closed) watcher.close();\n  });\n\n  emitter.close = function () {\n    if (closed) return;\n    if (ready) watcher.close();\n    closed = true;\n  };\n  return emitter;\n};\n","/home/travis/build/npmtest/node-npmtest-devtool/node_modules/devtool/lib/main-window.js":"var assign = require('object-assign');\nvar path = require('path');\nvar deepExtend = require('deep-extend');\n\nvar electron = require('electron');\nvar ipc = electron.ipcMain;\nvar BrowserWindow = electron.BrowserWindow;\n\nvar concat = require('concat-stream');\n\nmodule.exports = createMainWindow;\nfunction createMainWindow (entry, url, argv, onReady) {\n  argv = argv || {};\n\n  // On OSX, when detaching devtool you get a browser window.\n  // We will have to hide it manually and set its bounds to zero.\n  // On Windows, we can use argv.show to hide. More discussion:\n  // https://github.com/Jam3/devtool/issues/2\n  var emptyWindow = {\n    useContentSize: true,\n    width: 0,\n    height: 0,\n    x: 0,\n    y: 0\n  };\n  var bounds = argv.show ? undefined : emptyWindow;\n  var opts = assign({\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js'),\n      nodeIntegration: true,\n      webSecurity: false // To avoid errors on Windows\n    },\n    show: argv.show\n  }, bounds);\n\n  // Deep merge in config.browserWindow options\n  var config = argv.config;\n  if (config.browserWindow) {\n    opts = deepExtend(opts, config.browserWindow);\n  }\n\n  // boot up any desired extensions\n  var extNames = [];\n  var exts = [].concat(config.devToolsExtensions).filter(Boolean);\n  exts.forEach(function (ext) {\n    var result = BrowserWindow.addDevToolsExtension(ext);\n    if (result) extNames.push(result);\n  });\n  electron.app.on('will-quit', clearExtensions);\n\n  var mainWindow = new BrowserWindow(opts);\n  var closed = false;\n  mainWindow.on('closed', function () {\n    // Stop writing stdin to ipc when closed\n    closed = true;\n  });\n\n  // On first load, we trigger the app execution\n  var webContents = mainWindow.webContents;\n\n  // Send along stdin after first run\n  ipc.once('first-run', onFirstRun);\n\n  if (argv.headless) {\n    // Run without any debugger/DevTools\n    run();\n  } else {\n    // Run with a DevTools window and debugger instance\n    webContents.once('devtools-opened', function () {\n      // Hide the main window frame so windows\n      // users aren't seeing a tiny frame.\n      if (!argv.show) {\n        mainWindow.hide();\n\n        // If only devtools are shown and now window\n        // quit app when devtools is closed.\n        // Used setImmediate because the event was thrown before devtools opened\n        // and process.nextTick didn't work\n        setImmediate(function () {\n          webContents.once('devtools-closed', function () {\n            // Weird timeout is necessary for election@1.3.3 to\n            // avoid errors on OSX from Cmd+W\n            setTimeout(() => mainWindow.close(), 50);\n          });\n        });\n      }\n\n      // Run app\n      run();\n    });\n\n    // Launch debugger\n    var detach = config.detachDevTools !== false;\n    webContents.openDevTools({ detach: detach });\n  }\n\n  return mainWindow;\n\n  function clearExtensions () {\n    // TODO: This is currently not clearing\n    // extensions from cache due to a bug in Electron,\n    // it seems. Also, it does not handle node.js exits\n    // like Ctrl + C or process.exit.\n    extNames.forEach(function (name) {\n      BrowserWindow.removeDevToolsExtension(name);\n    });\n    extNames.length = 0;\n  }\n\n  function run () {\n    // Called before we load the app\n    onReady();\n\n    // Ensure we run whenever the page is refreshed,\n    // but only after domready.\n    webContents.on('dom-ready', function () {\n      webContents.send('run-entry');\n    });\n\n    // Load index.html\n    mainWindow.loadURL(url);\n  }\n\n  function onFirstRun () {\n    // Close after timeout\n    // The timer is started after entry is run\n    if (typeof argv.timeout === 'number') {\n      setTimeout(function () {\n        mainWindow.close();\n      }, argv.timeout);\n    }\n\n    if (entry) {\n      // has entry file, so pipe std along\n      process.stdin\n        .on('data', function (data) {\n          if (!closed) mainWindow.send('stdin', data);\n        })\n        .on('end', function () {\n          if (!closed) mainWindow.send('stdin', null);\n        });\n    } else {\n      // Does not have entry file, so execute the stdin\n      // An alternative solution might be to use\n      // snippet-stream to enable streaming eval (i.e.\n      // for stdin that doesn't \"end\").\n      process.stdin.pipe(concat(function (body) {\n        body = body.toString();\n\n        // TODO: Cleaner solution for --break on JS stdin\n        // if (argv.debugBreak) body = 'debugger;' + body;\n\n        if (!closed) webContents.executeJavaScript(body);\n      }));\n    }\n\n    process.stdin.resume();\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-devtool/node_modules/devtool/node_modules/electron/index.js":"var fs = require('fs')\nvar path = require('path')\n\nvar pathFile = path.join(__dirname, 'path.txt')\n\nif (fs.existsSync(pathFile)) {\n  module.exports = path.join(__dirname, fs.readFileSync(pathFile, 'utf-8'))\n} else {\n  throw new Error('Electron failed to install correctly, please delete node_modules/' + path.basename(__dirname) + ' and try installing again')\n}\n","/home/travis/build/npmtest/node-npmtest-devtool/node_modules/devtool/lib/parse-args.js":"var minimist = require('minimist');\nvar rc = require('rc');\n\nmodule.exports = function parseArgs (args) {\n  var argv = fromArray(args);\n\n  // use config search by default\n  if (typeof argv.config === 'undefined') argv.config = true;\n  if (argv.config !== false) {\n    // search rc paths\n    argv.config = rc('devtool', {\n      browserWindow: {\n        detachDevTools: true\n      }\n    });\n  } else {\n    // explicitly disable config searching\n    argv.config = { _: [] };\n  }\n\n  // Clean up the config object a bit\n  delete argv.config.config;\n  delete argv.config.C;\n\n  // We use globals to communicate some information from\n  // renderer / server without async ipc.\n  global.__electronDevtoolGlobals = {\n    console: argv.console,\n    sourceMaps: argv.sourceMaps,\n    browserField: argv.browserField,\n    debugBreak: argv.debugBreak,\n    browserGlobals: argv.browserGlobals,\n    nodeTimers: argv.nodeTimers,\n    requirePaths: [].concat(argv.require).filter(Boolean),\n    entry: null, // resolved in server.js\n    quit: true, // true until app launches\n    _processTTY: {\n      stdin: process.stdin.isTTY,\n      stdout: process.stdout.isTTY,\n      stderr: process.stderr.isTTY\n    }\n  };\n  argv.globals = global.__electronDevtoolGlobals;\n  return argv;\n};\n\nmodule.exports.fromArray = fromArray;\nfunction fromArray (args) {\n  return minimist(args, {\n    '--': true,\n    boolean: [\n      'console', 'quit', 'poll', 'show', 'headless',\n      'browserField', 'version', 'break', 'browserGlobals',\n      'nodeTimers', 'verbose', 'sourceMaps'\n    ],\n    string: [ 'index', 'require' ],\n    default: {\n      browserGlobals: true,\n      sourceMaps: true,\n      nodeTimers: true\n    },\n    alias: {\n      config: 'C',\n      debugBreak: 'break',\n      sourceMaps: [ 'source-maps', 'sm' ],\n      timeout: 't',\n      headless: 'h',\n      nodeTimers: [ 'node-timers', 'nt' ],\n      browserGlobals: [ 'bg', 'browser-globals' ],\n      browserField: [ 'bf', 'browser-field' ],\n      watch: 'w',\n      quit: 'q',\n      require: 'r',\n      version: 'v',\n      console: 'c',\n      index: 'i',\n      poll: 'p',\n      show: 's'\n    }\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-devtool/node_modules/devtool/lib/preload.js":"/*\n  This file helps make Electron behave more\n  like Node.js by shimming certain features.\n */\n\n(function () {\n  var electron = require('electron');\n  var serialize = require('serializerr');\n  var browserGlobals = require('./browser-globals');\n  var requireHook = require('./require-hook');\n  var consoleHook = require('./console-hook');\n  var timerHook = require('./timer-hook');\n  var mockProcess = require('mock-stdin');\n  var browserResolve = require('browser-resolve');\n  var nodeResolve = require('resolve');\n  var remote = electron.remote;\n\n  var ipc = electron.ipcRenderer;\n  var _process = remote.process;\n  var cwd = _process.cwd();\n\n  // get an absolute path to our entry point\n  var globals = remote.getGlobal('__electronDevtoolGlobals');\n  var entry = globals.entry;\n\n  // setup setTimeout/etc to be more Node-like\n  if (globals.nodeTimers !== false) {\n    timerHook();\n  }\n\n  // setup process to be more like Node.js\n  hookProcess();\n\n  // if we should pipe DevTools console back to terminal\n  if (globals.console) {\n    consoleHook();\n  }\n\n  // in DevTools console (i.e. REPL), these will be\n  // undefined to mimic Node REPL\n  delete global.__dirname;\n  delete global.__filename;\n\n  // delete some browser globals\n  if (globals.browserGlobals === false) {\n    browserGlobals.forEach(function (key) {\n      delete global[key];\n    });\n  }\n\n  // When there is an uncaught exception in the entry\n  // script, we may want to quit the devtool (i.e. for CI)\n  // or just print an error in DevTools console (i.e. for dev)\n  var shouldQuit = globals.quit;\n  if (shouldQuit) {\n    window.onerror = function (a, b, c, d, err) {\n      fatalError(err);\n      return true;\n    };\n  }\n\n  // Enable service workers\n  electron.webFrame.registerURLSchemeAsPrivileged('file');\n  electron.webFrame.registerURLSchemeAsSecure('file');\n  electron.webFrame.registerURLSchemeAsBypassingCSP('file');\n\n  // hook into the internal require for a few features:\n  //  - better error reporting on syntax errors and missing modules\n  //  - require.main acts like node.js CLI\n  //  - injecting debugger with --break\n  //  - undefining window/document/self/navigator\n  //  - adding source maps so the files show up in DevTools Sources\n  requireHook({\n    entry: entry,\n    sourceMaps: globals.sourceMaps,\n    debugBreak: globals.debugBreak,\n    browserGlobals: globals.browserGlobals,\n    browserField: globals.browserField,\n    basedir: cwd\n  });\n\n  var firstRun = true;\n  // boot up entry application when DOM is ready\n  ipc.on('run-entry', function () {\n    if (Array.isArray(globals.requirePaths)) {\n      globals.requirePaths.forEach(doRequire);\n    }\n    if (entry) require(entry);\n    if (firstRun) {\n      // Tell the main thread to send along stdin\n      firstRun = false;\n      ipc.send('first-run');\n    }\n  });\n\n  function doRequire (file) {\n    var result;\n    var resolveOpt = { basedir: cwd };\n    if (globals.browserField) {\n      result = browserResolve.sync(file, resolveOpt);\n    } else {\n      result = nodeResolve.sync(file, resolveOpt);\n    }\n    require(result);\n  }\n\n  function fatalError (err) {\n    ipc.send('error', JSON.stringify(serialize(err)));\n  }\n\n  function hookProcess () {\n    // setup renderer process to look a bit more like node\n    process.chdir(cwd);\n    process.argv = _process.argv.slice();\n    process.exit = function (code) {\n      _process.exit(code || 0);\n    };\n\n    // Remove the Electron argument to make it more\n    // like Node.js argv handling. User can still\n    // grab remote.process.argv for original.\n    process.argv.shift();\n\n    // if -- is passed, all options after it will be the\n    // new user arguments\n    var stopIdx = process.argv.indexOf('--');\n    if (stopIdx >= 0) {\n      var start = process.argv.slice(0, entry ? 2 : 1);\n      process.argv = start.concat(process.argv.slice(stopIdx + 1));\n    }\n\n    // like node, ensure we use the full file path instead\n    // of the relative path that the user specified in CLI\n    if (entry) {\n      process.argv[1] = entry;\n    }\n\n    // renderer streams should have same isTTY as main\n    var isTTY = globals._processTTY;\n    process.stdout.isTTY = isTTY.stdout;\n    process.stderr.isTTY = isTTY.stderr;\n\n    if (/^win/.test(process.platform)) {\n      // clear the property first to avoid error from mockProcess\n      Object.defineProperty(process, 'stdin', {\n        value: undefined,\n        configurable: true,\n        writable: false\n      });\n      // now mock stdin\n      mockProcess.stdin();\n    } else {\n      process.stdin._read = function () {\n        this.push('');\n      };\n    }\n\n    process.stdin.isTTY = isTTY.stdin;\n\n    // send along any stdin\n    ipc.on('stdin', function (event, data) {\n      process.stdin.push(data);\n    });\n  }\n})();\n","/home/travis/build/npmtest/node-npmtest-devtool/node_modules/devtool/lib/require-hook.js":"module.exports = function requireHook (opts) {\n  opts = opts || {};\n\n  var path = require('path');\n  var remote = require('electron').remote;\n  var Module = require('module');\n  var syntaxError = require('syntax-error');\n  var fs = remote.require('fs');\n  var stripBOM = require('strip-bom');\n  var combineSourceMap = require('combine-source-map');\n  var convertSourceMap = require('convert-source-map');\n  var browserResolve = require('browser-resolve');\n\n  var entry = opts.entry;\n  var basedir = opts.basedir || remote.process.cwd();\n  var useSourceMaps = opts.sourceMaps !== false;\n\n  var hasSetMain = false;\n  var currentWrapFile = null;\n\n  require.extensions['.js'] = function devtoolCompileModule (module, file) {\n    // set the main module so that Node.js scripts run correctly\n    if (!hasSetMain && entry && file === entry) {\n      hasSetMain = true;\n      module.parent = null; // pretend like we have no parent for this\n      process.mainModule = module;\n    }\n\n    var code = fs.readFileSync(file, 'utf8');\n    try {\n      currentWrapFile = file;\n      module._compile(stripBOM(code), file);\n    } catch (err) {\n      // Try to improve error messages for better UX.\n      var realErr = syntaxError(code, file);\n      if (realErr && realErr.annotated) {\n        // We found a nice error message for the user.\n        err.message = realErr.annotated;\n      } else {\n        // Did not get a nice error. Let's improve it by\n        // adding the file.\n        // We might get here e.g. if using ES6 features not\n        // supported in V8/Node.\n        err.message = '\\n' + file + '\\n' + err.message;\n      }\n\n      // And throw the original so Chrome debugger\n      // can stop on it. When --quit is passed, this\n      // will trigger window.onerror.\n      throw err;\n    }\n  };\n\n  // Include source maps for required modules\n  var wrap = Module.wrap;\n  Module.wrap = function devtoolWrapModule (script) {\n    // Setup source maps and inject a hidden debugger statement\n    var original = script;\n    if (opts.debugBreak && currentWrapFile === entry) {\n      var debugExpr = 'debugger;';\n      script = debugExpr + script;\n    }\n\n    // bail early if we don't have a path\n    if (!currentWrapFile || !useSourceMaps) return moduleWrap(script);\n\n    var sourceFile = path.relative(basedir, currentWrapFile).replace(/\\\\/g, '/');\n    var sourceFileName = path.basename(sourceFile);\n    var sourceFileDir = path.dirname(sourceFile);\n    var hasComment = convertSourceMap.commentRegex.test(script);\n    var hasMapFile = convertSourceMap.mapFileCommentRegex.test(script);\n\n    // if we have a map pointing to a file, inline it as base64\n    if (!hasComment && hasMapFile) {\n      try {\n        var sm = convertSourceMap.fromMapFileSource(original, sourceFileDir);\n        script = [\n          combineSourceMap.removeComments(script),\n          convertSourceMap.fromObject(sm.sourcemap).toComment()\n        ].join('\\n');\n        hasComment = true; // now we have base64 comment\n      } catch (err) {\n        // Don't attempt to handle source maps for this file,\n        // it is most likely a comment about source maps and not\n        // a *real* source map comment!\n      }\n    }\n\n    var wrapScript = moduleWrap(script);\n\n    // do not make any more alterations to the source maps\n    if (hasComment || hasMapFile) return wrapScript;\n\n    // Otherwise, if no source maps exist, we can generate a new one\n    var sourceMap = combineSourceMap.create(sourceFileName, basedir)\n        .addFile({ sourceFile: sourceFile, source: original });\n    return [\n      combineSourceMap.removeComments(wrapScript),\n      sourceMap.comment()\n    ].join('\\n');\n  };\n\n  function moduleWrap (script) {\n    if (opts.browserGlobals) {\n      // Use native module wrapper\n      return wrap.call(Module, script);\n    } else {\n      // Use custom module wrapper that undefines window/document\n      return '(function (exports, require, module, __filename, __dirname, process, global, window, navigator, document, self) { ' +\n        script +\n        '\\n});';\n    }\n  }\n\n  // Use browser field resolution for require statements\n  if (opts.browserField) {\n    var nativeResolve = Module._resolveFilename;\n    Module._resolveFilename = function devtoolResolveFilename (filename, parent) {\n      try {\n        // Try to use a browser resolver first...\n        return browserResolve.sync(filename, {\n          filename: parent.filename,\n          paths: parent.paths\n        });\n      } catch (e) {\n        // Otherwise fall back to native; e.g. for Electron requires\n        return nativeResolve.call(Module, filename, parent);\n      }\n    };\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-devtool/node_modules/devtool/lib/timer-hook.js":"/*\n  Shims global timers to behave like node,\n  returning values with ref() and unref().\n  This is on by default; you can disable with\n  --no-node-timers or --no-nt\n */\n\nvar timers = require('timers');\n\nmodule.exports = function timerHook () {\n  global.setTimeout = wrapWithActivateUvLoop(timers.setTimeout);\n  global.setInterval = wrapWithActivateUvLoop(timers.setInterval);\n  global.clearTimeout = timers.clearTimeout;\n  global.clearInterval = timers.clearInterval;\n};\n\nfunction wrapWithActivateUvLoop (func) {\n  return function updateTimerLoop () {\n    process.activateUvLoop();\n    return func.apply(this, arguments);\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-devtool/node_modules/devtool/server.js":"var path = require('path');\nvar fs = require('fs');\nvar createWatch = require('./lib/file-watch');\nvar createMainWindow = require('./lib/main-window');\nvar parseArgs = require('./lib/parse-args');\nvar mime = require('mime');\n\nvar electron = require('electron');\nvar app = electron.app;\nvar ipc = electron.ipcMain;\nvar globals;\n\nvar exitWithCode1 = false;\nprocess.removeAllListeners('uncaughtException');\nprocess.stdin.pause();\n\nvar argv = parseArgs(process.argv.slice(2));\nglobals = argv.globals;\n\napp.commandLine.appendSwitch('disable-http-cache');\nif (!argv.verbose) {\n  app.commandLine.appendSwitch('v', '-1');\n  app.commandLine.appendSwitch('vmodule', 'console=0');\n}\n\nif (argv.version || argv.v) {\n  console.log('devtool ' + require('./package.json').version);\n  console.log('electron ' + process.versions.electron);\n  console.log('node ' + process.versions.node);\n  console.log('chrome ' + process.versions.chrome);\n  process.exit(0);\n}\n\n// inject V8 flags\nif (argv.config && argv.config.v8) {\n  var flags = []\n      .concat(argv.config.v8.flags)\n      .filter(Boolean);\n  flags.forEach(function (flag) {\n    app.commandLine.appendSwitch('js-flags', flag);\n  });\n}\n\n// determine absolute path to entry file\nvar cwd = process.cwd();\nvar entryFile = argv._[0];\nif (entryFile) {\n  entryFile = path.isAbsolute(entryFile) ? entryFile : path.resolve(cwd, entryFile);\n  try {\n    entryFile = require.resolve(entryFile);\n    globals.entry = entryFile; // setup entry for preload\n  } catch (err) {\n    console.error(err.stack ? err.stack : err);\n    process.exit(1);\n  }\n}\n\nvar watcher = null;\nvar mainWindow = null;\napp.on('window-all-closed', function () {\n  app.quit();\n});\n\n// Quit the server with the correct exit code\napp.on('quit', function () {\n  if (watcher) watcher.close();\n  if (exitWithCode1) process.exit(1);\n});\n\napp.on('ready', function () {\n  electron.protocol.registerServiceWorkerSchemes(['file:']);\n\n  // Get starting HTML file\n  var htmlFile = path.resolve(__dirname, 'lib', 'index.html');\n  var customHtml = false; // if we should watch it as well\n  if (argv.index) {\n    customHtml = true;\n    htmlFile = path.isAbsolute(argv.index) ? argv.index : path.resolve(cwd, argv.index);\n  }\n\n  var mainIndexURL = 'file://' + __dirname + '/index.html';\n\n  // Replace index.html with custom one\n  electron.protocol.interceptBufferProtocol('file', function (request, callback) {\n    // We can't just spin up a local server for this, see here:\n    // https://github.com/atom/electron/issues/2414\n\n    var file = request.url;\n    if (file === mainIndexURL) {\n      file = htmlFile;\n    } else if (file.indexOf('file://') === 0) {\n      // All other assets should be relative to the user's cwd\n      file = file.substring(7);\n      file = path.resolve(cwd, path.relative(__dirname, file));\n    }\n\n    fs.readFile(file, function (err, data) {\n      // Could convert Node error codes to Chromium for better reporting\n      if (err) return callback(-6);\n      callback({\n        data: data,\n        mimeType: mime.lookup(file)\n      });\n    });\n  }, function (err) {\n    if (err) fatal(err);\n  });\n\n  // Setup the BrowserWindow\n  mainWindow = createMainWindow(entryFile, mainIndexURL, argv, function () {\n    // When we first launch, ensure the quit flag is set to the user args\n    globals.quit = argv.quit;\n  });\n\n  // De-reference for GC\n  mainWindow.on('closed', function () {\n    mainWindow = null;\n  });\n\n  // Setup the file watcher\n  if (argv.watch) {\n    var globs = [].concat(argv.watch).filter(function (f) {\n      return typeof f === 'string';\n    });\n    if (globs.length === 0) globs = [ '**/*.{js,json}' ];\n    if (customHtml && globs.indexOf(htmlFile) === -1) {\n      // also watch the specified --index HTML file\n      globs.push(htmlFile);\n    }\n    watcher = createWatch(globs, argv);\n    watcher.on('change', function (file) {\n      if (mainWindow) mainWindow.reload();\n    });\n  }\n\n  // Fatal error in renderer\n  ipc.on('error', function (event, errObj) {\n    var err = JSON.parse(errObj);\n    bail(err.stack);\n  });\n\n  function bail (err) {\n    console.error(err.stack ? err.stack : err);\n    if (globals.quit) {\n      exitWithCode1 = true;\n      if (mainWindow) mainWindow.close();\n    }\n  }\n\n  function fatal (err) {\n    globals.quit = true;\n    bail(err);\n  }\n});\n"}